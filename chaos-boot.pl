use warnings;
use strict;
use Device::SerialPort;
use Getopt::Long;
use File::Basename qw|dirname|;
use Time::HiRes qw|usleep time|;
use Linux::Termios2;
use POSIX qw( :termios_h );
use Data::Dumper;
no utf8;

$| = 1;

main();

sub main {
	my $device = "/dev/ttyUSB3";
	my $boot_speed = 115200;
	my $speed = 1600000;
	my $bkey;
	my $exec_file;
	my $as_hex = 0;
	my $bootloader = dirname(__FILE__)."/bootloader/bootloader.bin";

	GetOptions (
		"device=s" => \$device, 
		"boot-speed=s" => \$boot_speed, 
		"speed=s" => \$speed, 
		"bkey=s" => \$bkey, 
		"hex" => \$as_hex, 
		"exec=s" => \$exec_file
	);

	my $port = Device::SerialPort->new($device);
	die("open port error ($device)") if (!$port);

	$port->baudrate($boot_speed);
	$port->databits(8);
	$port->parity("none");
	$port->stopbits(1);

	$port->read_char_time(0);
	$port->read_const_time(100);

	$port->write_settings;
	
	print "Please, short press red button!\n";

	my $boot_ok = 0;
	while (1) {
		$port->write("AT");
		
		my $c = readb($port);
		if ($c == 0xB0 || $c == 0xC0) {
			print "\n";
			print "SGOLD detected!\n" if ($c == 0xB0);
			print "NewSGOLD detected!\n" if ($c == 0xC0);
			
			$port->read_char_time(5000);
			$port->read_const_time(5000);
			
			print "Sending boot...\n";
			my $boot = mk_chaos_boot($bkey);
			write_boot($port, $boot);
			
			$c = readb($port);
			if ($c == 0xA5) {
				usleep(200 * 1000);
				
				# Странная проверка в PV Буте
				$port->write("\x55");
				$c = readb($port);
				
				if ($c != 0xAA) {
					print "Boot init error\n";
					exit(1);
				}
				
				chaos_ping($port) || exit(1);
				chaos_keep_alive($port);
				if ($speed != $boot_speed) {
					chaos_set_speed($port, $speed) or exit(1);
				}
				chaos_keep_alive($port);
				print "Chaos Bootloader - OK\n";
				
				# Запуск файла в RAM
				if ($exec_file) {
					my $addr = 0xA8000000;
					
					my $raw = "";
					open(F, "<$exec_file") or die("open($exec_file): $!");
					while (!eof(F)) {
						my $buff;
						read F, $buff, 2048;
						$raw .= $buff;
					}
					close(F);
					chaos_keep_alive($port);
					
					printf("Load $exec_file to RAM (%08X)... (size=%d)\n", $addr, length($raw));
					chaos_write_ram($port, $addr, $raw, 1024 * 3.5) or die("load error");
					
					printf("Exec %08X...\n", $addr);
					chaos_goto($port, $addr);
				}
			} else {
				printf("Invalid answer: %02X\n", $c);
				printf("Chaos bootloader not found!\n");
				exit(1);
			}
			
			if ($as_hex) {
				while (($c = readb($port)) >= 0) {
					my $str = chr($c);
					printf("%s | %02X\n", ($str =~ /[[:print:]]/ ? "'".$str."'" : " ? "), $c);
				}
			} else {
				while (($c = readb($port)) >= 0) {
					print chr($c);
				}
			}
			last;
		}
		print ".";
	}
}

sub chaos_ping {
	my ($port) = @_;
	$port->write("A");
	my $c = readb($port);
	if ($c != 0x52) {
		warn sprintf("[chaos_ping] Invalid answer 0x%02X\n", $c);
		return 0;
	}
	return 1;
}

sub chaos_keep_alive {
	my ($port) = @_;
	$port->write(".");
	return 1;
}

sub chaos_set_speed {
	my ($port, $speed) = @_;
	
	my %CHAOS_SPEEDS = (
		57600 => 0x00, 
		115200 => 0x01, 
		230400 => 0x02, 
		460800 => 0x03, 
		614400 => 0x04, 
		921600 => 0x05, 
		1228800 => 0x06, 
		1600000 => 0x07, 
		1500000 => 0x08
	);
	
	if (!exists($CHAOS_SPEEDS{$speed})) {
		warn("Invalid speed $speed! Allowed: ".split(", ", keys(%CHAOS_SPEEDS)));
		return 0;
	}
	
	my $old_speed = $port->baudrate;
	$port->write("H".chr($CHAOS_SPEEDS{$speed}));
	my $c = readb($port);
	if ($c == 0x68) {
		set_port_baudrate($port, $speed);
		$port->write("A");
		$c = readb($port);
		if ($c == 0x48) {
			# Успешно установили скорость
			return 1;
		}
	}
	set_port_baudrate($port, $old_speed);
	warn sprintf("[chaos_set_speed] Invalid answer 0x%02X", $c);
	return 0;
}

sub chaos_goto {
	my ($port, $addr) = @_;
	
	my $test = 0;
	$port->write("G");
	$port->write(chr(($addr >> 24) & 0xFF).chr(($addr >> 16) & 0xFF).chr(($addr >> 8) & 0xFF).chr($addr & 0xFF));
	$port->write(chr(($addr >> 24) & 0xFF).chr(($addr >> 16) & 0xFF).chr(($addr >> 8) & 0xFF).chr($addr & 0xFF));
	$port->write(chr(($addr >> 24) & 0xFF).chr(($addr >> 16) & 0xFF).chr(($addr >> 8) & 0xFF).chr($addr & 0xFF));
	
	return 1;
}

sub chaos_write_ram {
	my ($port, $dst_addr, $buff, $chunk) = @_;
	
	my @blocks = ();
	my $buff_size = length($buff);
	for (my $j = 0; $j < $buff_size; $j += $chunk) {
		my $tmp = substr($buff, $j, $chunk);
		
		my $chk;
		my $size = length($tmp);
		for (my $i = 0; $i < $size; ++$i) {
			$chk ^= ord(substr($tmp, $i, 1));
		}
		my $addr = $dst_addr + $j;
		
		push @blocks, [
			$addr, $size, 
			"W".
			chr(($addr >> 24) & 0xFF).chr(($addr >> 16) & 0xFF).chr(($addr >> 8) & 0xFF).chr($addr & 0xFF).
			chr(($size >> 24) & 0xFF).chr(($size >> 16) & 0xFF).chr(($size >> 8) & 0xFF).chr($size & 0xFF).
			$tmp.chr($chk)
		];
	}
	
	my $i = 0;
	my $start = time;
	for my $block (@blocks) {
		my $addr = $block->[0];
		my $size = $block->[1];
		
		if ($i % 10 == 0) {
			printf("                                                    \r");
			printf("#$i %02d%s [WRITE] %08X-%08X (%.02f Kbps)\r", int(($addr - $dst_addr) / $buff_size * 100), "%", $addr, $addr + $size, (($addr - $dst_addr) / 1024) / (time - $start));
		}
		
		$port->write($block->[2]);
		
		my $ok = $port->read(2);
		if ($ok ne "OK") {
			warn sprintf("\n[chaos_write_ram] Invalid answer '%02X%02X'", ord(substr($ok, 0, 1)), ord(substr($ok, 1, 1)));
			return 0;
		}
		++$i;
	}
	print "\n";
	return 1;
}

sub mk_chaos_boot {
	my $bkey = shift;
	# Тут не совсем бут Chaos'a. Тут бут PV. Но он, как я понял, модификация бута от Chaos
	my $data = 
		"08D04FE200000FE1C00080E300F021E10000A0E3A80100EB541B9FE57C0091E50100C0E3090000EA5349454D454E535F424F4F54434F44450300000000C20100".
		($bkey || "00000000000000000000000000000000").
		
	return hex2bin($data);
}

sub hex2bin {
	my $hex = shift;
	$hex =~ s/\s+//gim;
	$hex = "0$hex" if (length($hex) % 2 != 0);
	$hex =~ s/([A-F0-9]{2})/chr(hex($1))/ge;
	return $hex;
}

sub write_boot {
	my ($port, $boot) = @_;
	
	# Считаем XOR
	my $chk = 0;
	my $len = length($boot);
	for (my $i = 0; $i < $len; ++$i) {
		$chk ^= ord(substr($boot, $i, 1));
	}
	
	$port->write("\x30");
	
	# Шлём размер бута
	$port->write(chr($len & 0xFF).chr(($len >> 8) & 0xFF));
	
	# Шлём бут
	$port->write($boot);
	
	# Шлём XOR бута
	$port->write(chr($chk));
	
	my $c = readb($port);
	return 1 if ($c == 0xC1);
	
	warn sprintf("Invalid answer: %02X\n", $c);
	return 0;
}

sub set_port_baudrate {
	my ($port, $baudrate) = @_;
	my $termios = Linux::Termios2->new;
	$termios->getattr($port->FILENO);
	$termios->setospeed($baudrate);
	$termios->setispeed($baudrate);
	$termios->setattr($port->FILENO, TCSANOW);
	return -1;
}

sub readb {
	my ($port) = @_;
	my ($count, $char) = $port->read(1);
	return ord($char) if ($count);
	return -1;
}
